# rebind prefix
unbind C-b
set -g prefix C-q

# split panes
bind - split-window -c "#{pane_current_path}"
bind _ split-window -c "#{pane_current_path}"
bind \ split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"

# start new windows in current directory
bind c new-window -c "#{pane_current_path}"

# move around panes with hjkl, as one would in vim after pressing ctrl-w
unbind l
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# can keep control key held down
bind C-h select-pane -L
bind C-j select-pane -D
bind C-k select-pane -U
bind C-l select-pane -R

# repeatedly press C-n to cycle windows
bind -r C-n next-window
bind -r C-p previous-window

# vim-like bindings for resizing panes
unbind L
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# vim-style controls for copy mode
setw -g mode-keys vi
set -g update-environment "DISPLAY WINDOWID SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION SSH_AUTH_SOCK"

# copy to clipboard in copy mode
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# let us use utf-8 drawing characters to make tab-like window formats
set -g status-utf8 on

set -g status-bg black
set -g status-fg white

# left side of status bar
set -g status-left-length 100
set -g status-left-bg default
set -g status-left-fg black
set -g status-left-attr bold
set -g status-left '  '

# right side of status bar
set -g status-right-length 100
set -g status-right-fg black
set -g status-right-attr bold

# format: { current task } [ battery ] (date/time)
set -g status-right " #[fg=red]{#[fg=white] #(ag '\nCLOCK:' ~/org | grep -v = | grep 'CLOCK:' -B1 | sed 's/.*:[^a-zA-Z]*//g') #[fg=red]}#[default] #[fg=magenta][#[fg=white] #(pmset -g batt | tr '\t' '\n' | sed -e '3!d' -e 's/;.*//') #[fg=magenta]]#[default] #[fg=blue](#[fg=white] %a, %b %d -- %I:%M %p #[fg=blue])#[default] "

# make background window look like white tab
set-window-option -g window-status-bg default
set-window-option -g window-status-fg white
set-window-option -g window-status-attr none
set-window-option -g window-status-format ' \(#I) #W/ '

# make foreground window look like bold yellow foreground tab
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-fg magenta
set-window-option -g window-status-current-attr none
set-window-option -g window-status-current-format '\#[bg=default,underscore] (#I) #W #[default]/'

# active terminal yellow border, non-active white
set -g pane-border-bg default
set -g pane-border-fg white
set -g pane-active-border-bg default
set -g pane-active-border-fg magenta

# set a 256color $TERM variable so programs inside tmux know they can use 256 colors
set -g default-terminal "screen-256color"
# NOTE: the above works best with iTerm2, Profiles->Terminal, terminal type=xterm-256color
# NOTE: the above will break colors on OSX Terminal since it is only 8 colors.
#       you can comment it out to use tmux with it.

# reload tmux config file
bind C-r source ~/.tmux.conf \; display-message 'reloaded conf'

# restart haskell repl
bind R send-keys ':q' 'Enter' \; run-shell 'sleep 0.2' \; send-keys 'Up' 'Enter'

set -g base-index 1 # start window numbering at 1
set -g pane-base-index 1 # start pane numbering at 1
set -g history-limit 10000
set -s escape-time 0
set-option -g status-keys emacs

unbind d # disable session detaching
unbind Escape # disable escape (to copy mode)

# switches to last selected window
bind C-q last-window

# disable suspend tmux
unbind C-z
bind C-z resize-pane -Z

# run previous command in last pane
unbind T
bind T last-pane \; resize-pane -Z 

# run previous command in last pane
unbind t
bind t last-pane \; send-keys C-l 'Up' 'Enter' \; last-pane

# run previous command in last pane
unbind C-t
bind C-t last-pane \; send-keys C-l 'Up' 'Enter' \; last-pane

# reload haskell and run main
unbind m
bind m last-pane \; send-keys ':q' 'Enter' \; run-shell 'sleep 0.2' \; send-keys 'Up' 'Enter' ':main' 'Enter' \; last-pane

# open emacs above
unbind e
bind e select-pane -t 1 \; split-window -c "#{pane_current_path}" \; send-keys 'emacs' 'Enter' \; swap-pane -U

# focus top window
unbind P
bind P select-pane -t 1 \; select-pane -D \; resize-pane -y 5 \; last-pane

# open emacs above
unbind N
bind N select-pane -t 1 \; resize-pane -y 5 \; last-pane
